/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ExamplesImport } from './routes/examples'
import { Route as DocsImport } from './routes/docs'
import { Route as PathImport } from './routes/$path'
import { Route as IndexImport } from './routes/index'
import { Route as DocsIndexImport } from './routes/docs/index'
import { Route as PreviewPresentationImport } from './routes/preview/presentation'
import { Route as PreviewMinimalImport } from './routes/preview/minimal'
import { Route as PreviewDelftImport } from './routes/preview/delft'
import { Route as DocsDocsPathImport } from './routes/docs/$docsPath'

// Create/Update Routes

const ExamplesRoute = ExamplesImport.update({
  id: '/examples',
  path: '/examples',
  getParentRoute: () => rootRoute,
} as any)

const DocsRoute = DocsImport.update({
  id: '/docs',
  path: '/docs',
  getParentRoute: () => rootRoute,
} as any)

const PathRoute = PathImport.update({
  id: '/$path',
  path: '/$path',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DocsIndexRoute = DocsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DocsRoute,
} as any)

const PreviewPresentationRoute = PreviewPresentationImport.update({
  id: '/preview/presentation',
  path: '/preview/presentation',
  getParentRoute: () => rootRoute,
} as any)

const PreviewMinimalRoute = PreviewMinimalImport.update({
  id: '/preview/minimal',
  path: '/preview/minimal',
  getParentRoute: () => rootRoute,
} as any)

const PreviewDelftRoute = PreviewDelftImport.update({
  id: '/preview/delft',
  path: '/preview/delft',
  getParentRoute: () => rootRoute,
} as any)

const DocsDocsPathRoute = DocsDocsPathImport.update({
  id: '/$docsPath',
  path: '/$docsPath',
  getParentRoute: () => DocsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/$path': {
      id: '/$path'
      path: '/$path'
      fullPath: '/$path'
      preLoaderRoute: typeof PathImport
      parentRoute: typeof rootRoute
    }
    '/docs': {
      id: '/docs'
      path: '/docs'
      fullPath: '/docs'
      preLoaderRoute: typeof DocsImport
      parentRoute: typeof rootRoute
    }
    '/examples': {
      id: '/examples'
      path: '/examples'
      fullPath: '/examples'
      preLoaderRoute: typeof ExamplesImport
      parentRoute: typeof rootRoute
    }
    '/docs/$docsPath': {
      id: '/docs/$docsPath'
      path: '/$docsPath'
      fullPath: '/docs/$docsPath'
      preLoaderRoute: typeof DocsDocsPathImport
      parentRoute: typeof DocsImport
    }
    '/preview/delft': {
      id: '/preview/delft'
      path: '/preview/delft'
      fullPath: '/preview/delft'
      preLoaderRoute: typeof PreviewDelftImport
      parentRoute: typeof rootRoute
    }
    '/preview/minimal': {
      id: '/preview/minimal'
      path: '/preview/minimal'
      fullPath: '/preview/minimal'
      preLoaderRoute: typeof PreviewMinimalImport
      parentRoute: typeof rootRoute
    }
    '/preview/presentation': {
      id: '/preview/presentation'
      path: '/preview/presentation'
      fullPath: '/preview/presentation'
      preLoaderRoute: typeof PreviewPresentationImport
      parentRoute: typeof rootRoute
    }
    '/docs/': {
      id: '/docs/'
      path: '/'
      fullPath: '/docs/'
      preLoaderRoute: typeof DocsIndexImport
      parentRoute: typeof DocsImport
    }
  }
}

// Create and export the route tree

interface DocsRouteChildren {
  DocsDocsPathRoute: typeof DocsDocsPathRoute
  DocsIndexRoute: typeof DocsIndexRoute
}

const DocsRouteChildren: DocsRouteChildren = {
  DocsDocsPathRoute: DocsDocsPathRoute,
  DocsIndexRoute: DocsIndexRoute,
}

const DocsRouteWithChildren = DocsRoute._addFileChildren(DocsRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$path': typeof PathRoute
  '/docs': typeof DocsRouteWithChildren
  '/examples': typeof ExamplesRoute
  '/docs/$docsPath': typeof DocsDocsPathRoute
  '/preview/delft': typeof PreviewDelftRoute
  '/preview/minimal': typeof PreviewMinimalRoute
  '/preview/presentation': typeof PreviewPresentationRoute
  '/docs/': typeof DocsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$path': typeof PathRoute
  '/examples': typeof ExamplesRoute
  '/docs/$docsPath': typeof DocsDocsPathRoute
  '/preview/delft': typeof PreviewDelftRoute
  '/preview/minimal': typeof PreviewMinimalRoute
  '/preview/presentation': typeof PreviewPresentationRoute
  '/docs': typeof DocsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/$path': typeof PathRoute
  '/docs': typeof DocsRouteWithChildren
  '/examples': typeof ExamplesRoute
  '/docs/$docsPath': typeof DocsDocsPathRoute
  '/preview/delft': typeof PreviewDelftRoute
  '/preview/minimal': typeof PreviewMinimalRoute
  '/preview/presentation': typeof PreviewPresentationRoute
  '/docs/': typeof DocsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$path'
    | '/docs'
    | '/examples'
    | '/docs/$docsPath'
    | '/preview/delft'
    | '/preview/minimal'
    | '/preview/presentation'
    | '/docs/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$path'
    | '/examples'
    | '/docs/$docsPath'
    | '/preview/delft'
    | '/preview/minimal'
    | '/preview/presentation'
    | '/docs'
  id:
    | '__root__'
    | '/'
    | '/$path'
    | '/docs'
    | '/examples'
    | '/docs/$docsPath'
    | '/preview/delft'
    | '/preview/minimal'
    | '/preview/presentation'
    | '/docs/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PathRoute: typeof PathRoute
  DocsRoute: typeof DocsRouteWithChildren
  ExamplesRoute: typeof ExamplesRoute
  PreviewDelftRoute: typeof PreviewDelftRoute
  PreviewMinimalRoute: typeof PreviewMinimalRoute
  PreviewPresentationRoute: typeof PreviewPresentationRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PathRoute: PathRoute,
  DocsRoute: DocsRouteWithChildren,
  ExamplesRoute: ExamplesRoute,
  PreviewDelftRoute: PreviewDelftRoute,
  PreviewMinimalRoute: PreviewMinimalRoute,
  PreviewPresentationRoute: PreviewPresentationRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$path",
        "/docs",
        "/examples",
        "/preview/delft",
        "/preview/minimal",
        "/preview/presentation"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/$path": {
      "filePath": "$path.tsx"
    },
    "/docs": {
      "filePath": "docs.tsx",
      "children": [
        "/docs/$docsPath",
        "/docs/"
      ]
    },
    "/examples": {
      "filePath": "examples.tsx"
    },
    "/docs/$docsPath": {
      "filePath": "docs/$docsPath.tsx",
      "parent": "/docs"
    },
    "/preview/delft": {
      "filePath": "preview/delft.tsx"
    },
    "/preview/minimal": {
      "filePath": "preview/minimal.tsx"
    },
    "/preview/presentation": {
      "filePath": "preview/presentation.tsx"
    },
    "/docs/": {
      "filePath": "docs/index.tsx",
      "parent": "/docs"
    }
  }
}
ROUTE_MANIFEST_END */
